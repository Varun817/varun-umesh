<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20190222 13:04:23.863" generator="Robot 3.1.1 (Python 2.7.10 on darwin)">
<suite id="s1" name="Categories Endpoint TestSuite &amp; Functional Tests &amp; Products Endpoint TestSuite &amp; Services Endpoint TestSuite &amp; Stores Endpoint TestSuite">
<suite source="/Users/vumesh/Documents/vartest/varun-umesh/RestApiAutomation/TESTSUITES/Categories_Endpoint_TestSuite.robot" id="s1-s1" name="Categories Endpoint TestSuite">
<kw type="setup" name="Initialize Domain">
<arguments>
<arg>${domain}</arg>
</arguments>
<kw name="Initialize Domain" library="RestConnection">
<doc>Initialize Domain url for the tests</doc>
<arguments>
<arg>${domain}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:24.286" starttime="20190222 13:04:24.282"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:24.286" starttime="20190222 13:04:24.279"></status>
</kw>
<test id="s1-s1-t1" name="Fetch All records - GET | Validate JSON Schema of the Response">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>categories</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:24.861" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:24.862" level="INFO">${response} = {u'skip': 0, u'total': 4314, u'limit': 10, u'data': [{u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0020004', u'createdAt': u'2016-11-17T17:57:04.285Z', u'name': u'Uniqu...</msg>
<status status="PASS" endtime="20190222 13:04:24.862" starttime="20190222 13:04:24.289"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:24.864" starttime="20190222 13:04:24.863"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:24.864" starttime="20190222 13:04:24.862"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>${response["data"]}</arg>
</arguments>
<msg timestamp="20190222 13:04:24.866" level="INFO">${response_data} = [{u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0020004', u'createdAt': u'2016-11-17T17:57:04.285Z', u'name': u'Unique Gifts'}, {u'updatedAt': u'2016-11-17T17:57:04.899Z...</msg>
<status status="PASS" endtime="20190222 13:04:24.866" starttime="20190222 13:04:24.864"></status>
</kw>
<kw type="for" name="${item} IN [ @{response_data} ]">
<kw type="foritem" name="${item} = {u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0020004', u'createdAt': u'2016-11-17T17:57:04.285Z', u'name': u'Unique Gifts'}, {u'updatedAt': u'2016-11-17T17:57:04.899Z'...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:24.870" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:24.870" starttime="20190222 13:04:24.867"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:24.870" starttime="20190222 13:04:24.867"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [], u'name': u'Learning Toys', u'updatedAt': u'2016-11-17T17:57:04.285Z', u'categoryPath': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0010000', u'createdAt': u'2016-...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:24.873" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:24.873" starttime="20190222 13:04:24.871"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:24.873" starttime="20190222 13:04:24.871"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [], u'name': u'DVD Games', u'updatedAt': u'2016-11-17T17:57:04.285Z', u'categoryPath': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0010000', u'createdAt': u'2016-11-1...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:24.875" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:24.876" starttime="20190222 13:04:24.874"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:24.876" starttime="20190222 13:04:24.873"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [], u'name': u'Unique Gifts', u'updatedAt': u'2016-11-17T17:57:04.285Z', u'categoryPath': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0010000', u'createdAt': u'2016-1...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:24.878" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:24.878" starttime="20190222 13:04:24.876"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:24.878" starttime="20190222 13:04:24.876"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0101000', u'createdAt': u'2016-11-17T17:57:04.285Z', u'name': u'TVs'}, {u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': ...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:24.884" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:24.884" starttime="20190222 13:04:24.882"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:24.884" starttime="20190222 13:04:24.879"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0101001', u'createdAt': u'2016-11-17T17:57:04.285Z', u'name': u'All Flat-Panel TVs'}, {u'updatedAt': u'2016-11-17T17:57:04...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:24.887" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:24.887" starttime="20190222 13:04:24.885"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:24.887" starttime="20190222 13:04:24.885"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.643Z', u'id': u'pcmcat138100050024', u'createdAt': u'2016-11-17T17:57:04.643Z', u'name': u'TV &amp; Home Theater Services'}], u'name': u'All Flat-P...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:24.893" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:24.893" starttime="20190222 13:04:24.888"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:24.894" starttime="20190222 13:04:24.887"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0102003', u'createdAt': u'2016-11-17T17:57:04.285Z', u'name': u'Blu-ray Players'}, {u'updatedAt': u'2016-11-17T17:57:04.28...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:24.897" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:24.897" starttime="20190222 13:04:24.895"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:24.898" starttime="20190222 13:04:24.894"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:05.399Z', u'id': u'pcmcat205900050012', u'createdAt': u'2016-11-17T17:57:05.399Z', u'name': u'3D Blu-ray Players'}, {u'updatedAt': u'2016-11-17T17...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:24.900" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:24.900" starttime="20190222 13:04:24.898"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:24.900" starttime="20190222 13:04:24.898"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.643Z', u'id': u'pcmcat138100050024', u'createdAt': u'2016-11-17T17:57:04.643Z', u'name': u'TV &amp; Home Theater Services'}], u'name': u'DVD Player...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:24.902" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:24.902" starttime="20190222 13:04:24.901"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:24.903" starttime="20190222 13:04:24.900"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:24.903" starttime="20190222 13:04:24.866"></status>
</kw>
<doc>*Validate - categories endpoint for method - GET*</doc>
<tags>
<tag>categories</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190222 13:04:24.903" critical="yes" starttime="20190222 13:04:24.287"></status>
</test>
<test id="s1-s1-t2" name="Create , Fetch, Update and Delete New record - POST, GET, PATCH, DELETE | Validate JSON Schema of each of the Responses">
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>8</arg>
<arg>[LETTERS]</arg>
</arguments>
<assign>
<var>${random_id}</var>
</assign>
<msg timestamp="20190222 13:04:24.906" level="INFO">${random_id} = kYfRFuXm</msg>
<status status="PASS" endtime="20190222 13:04:24.906" starttime="20190222 13:04:24.905"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${random_id}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:24.907" starttime="20190222 13:04:24.906"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${product}</arg>
<arg>{"id": "${random_id}", "name": "Test Category created"}</arg>
</arguments>
<msg timestamp="20190222 13:04:24.909" level="INFO">${product} = {"id": "kYfRFuXm", "name": "Test Category created"}</msg>
<status status="PASS" endtime="20190222 13:04:24.909" starttime="20190222 13:04:24.907"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>categories</arg>
<arg>POST</arg>
<arg>{}</arg>
<arg>${product}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${created_product_response}</var>
</assign>
<msg timestamp="20190222 13:04:25.000" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:25.001" level="INFO">${created_product_response} = {u'updatedAt': u'2019-02-22T07:34:24.972Z', u'id': u'kYfRFuXm', u'createdAt': u'2019-02-22T07:34:24.972Z', u'name': u'Test Category created'}</msg>
<status status="PASS" endtime="20190222 13:04:25.001" starttime="20190222 13:04:24.909"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${id}</arg>
<arg>${created_product_response["id"]}</arg>
</arguments>
<msg timestamp="20190222 13:04:25.003" level="INFO">${id} = kYfRFuXm</msg>
<status status="PASS" endtime="20190222 13:04:25.003" starttime="20190222 13:04:25.001"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:25.004" starttime="20190222 13:04:25.004"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:25.004" starttime="20190222 13:04:25.003"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>categories/${id}</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:25.031" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:25.031" level="INFO">${response} = {u'subCategories': [], u'name': u'Test Category created', u'updatedAt': u'2019-02-22T07:34:24.972Z', u'categoryPath': [], u'id': u'kYfRFuXm', u'createdAt': u'2019-02-22T07:34:24.972Z'}</msg>
<status status="PASS" endtime="20190222 13:04:25.032" starttime="20190222 13:04:25.005"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:25.034" starttime="20190222 13:04:25.033"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:25.034" starttime="20190222 13:04:25.032"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190222 13:04:25.040" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:25.040" starttime="20190222 13:04:25.036"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${updated_product}</arg>
<arg>{"name": "Test Update New category"}</arg>
</arguments>
<msg timestamp="20190222 13:04:25.043" level="INFO">${updated_product} = {"name": "Test Update New category"}</msg>
<status status="PASS" endtime="20190222 13:04:25.043" starttime="20190222 13:04:25.041"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>categories/${id}</arg>
<arg>PATCH</arg>
<arg>{}</arg>
<arg>${updated_product}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:25.071" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:25.071" level="INFO">${response} = {u'updatedAt': u'2019-02-22T07:34:25.057Z', u'id': u'kYfRFuXm', u'createdAt': u'2019-02-22T07:34:24.972Z', u'name': u'Test Update New category'}</msg>
<status status="PASS" endtime="20190222 13:04:25.071" starttime="20190222 13:04:25.044"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:25.073" starttime="20190222 13:04:25.072"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:25.073" starttime="20190222 13:04:25.072"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190222 13:04:25.080" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:25.081" starttime="20190222 13:04:25.074"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>categories/${id}</arg>
<arg>DELETE</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:26.083" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:26.083" level="INFO">${response} = {u'updatedAt': u'2019-02-22T07:34:25.057Z', u'id': u'kYfRFuXm', u'createdAt': u'2019-02-22T07:34:24.972Z', u'name': u'Test Update New category'}</msg>
<status status="PASS" endtime="20190222 13:04:26.083" starttime="20190222 13:04:25.082"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:26.084" starttime="20190222 13:04:26.084"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:26.085" starttime="20190222 13:04:26.083"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>categories/${id}</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:26.108" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:26.108" level="INFO">${response} = {u'className': u'not-found', u'errors': {}, u'message': u"No record found for id 'kYfRFuXm'", u'code': 404, u'name': u'NotFound'}</msg>
<status status="PASS" endtime="20190222 13:04:26.108" starttime="20190222 13:04:26.085"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:26.112" starttime="20190222 13:04:26.110"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:26.113" starttime="20190222 13:04:26.108"></status>
</kw>
<doc>*Validate - categories endpoint for methods - POST, GET, PATCH and DELETE*</doc>
<tags>
<tag>categories</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190222 13:04:26.114" critical="yes" starttime="20190222 13:04:24.904"></status>
</test>
<doc>Best Buy API Playground Test Suite</doc>
<status status="PASS" endtime="20190222 13:04:26.115" starttime="20190222 13:04:23.913"></status>
</suite>
<suite source="/Users/vumesh/Documents/vartest/varun-umesh/RestApiAutomation/TESTSUITES/Functional_Tests.robot" id="s1-s2" name="Functional Tests">
<kw type="setup" name="Initialize Domain">
<arguments>
<arg>${domain}</arg>
</arguments>
<kw name="Initialize Domain" library="RestConnection">
<doc>Initialize Domain url for the tests</doc>
<arguments>
<arg>${domain}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:26.147" starttime="20190222 13:04:26.143"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:26.148" starttime="20190222 13:04:26.137"></status>
</kw>
<test id="s1-s2-t1" name="Fetch Highest Priced Products">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products</arg>
<arg>GET</arg>
<arg>{"$sort[price]":"-1"}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:29.134" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:29.135" level="INFO">${response} = {u'skip': 0, u'total': 51977, u'limit': 10, u'data': [{u'name': u'Sony - ES SXRD 3D-Ready 4K Home Theater Projector - Black', u'url': u'http://www.bestbuy.com/site/sony-es-sxrd-3d-ready-4k-home-theate...</msg>
<status status="PASS" endtime="20190222 13:04:29.135" starttime="20190222 13:04:26.150"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:29.137" starttime="20190222 13:04:29.136"></status>
</kw>
<doc>*Validate Query String provided*</doc>
<tags>
<tag>products</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190222 13:04:29.137" critical="yes" starttime="20190222 13:04:26.148"></status>
</test>
<test id="s1-s2-t2" name="Product Name and Description Only">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products</arg>
<arg>GET</arg>
<arg>{"$select[]":["name","description"]}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:29.219" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:29.220" level="INFO">${response} = {u'skip': 0, u'total': 51977, u'limit': 10, u'data': [{u'name': u'Duracell - AA 1.5V CopperTop Batteries (4-Pack)', u'description': u'Long-lasting energy; DURALOCK Power Preserve technology; for toys,...</msg>
<status status="PASS" endtime="20190222 13:04:29.220" starttime="20190222 13:04:29.139"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:29.221" starttime="20190222 13:04:29.220"></status>
</kw>
<doc>*Validate Query String provided*</doc>
<tags>
<tag>products</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190222 13:04:29.222" critical="yes" starttime="20190222 13:04:29.138"></status>
</test>
<test id="s1-s2-t3" name="TVs with free shipping and price between $500 and $800">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products</arg>
<arg>GET</arg>
<arg>{"category.name":"TVs","price[$gt]":"500","price[$lt]":"800","shipping[$eq]":"0"}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:29.878" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:29.879" level="INFO">${response} = {u'skip': 0, u'total': 29, u'limit': 10, u'data': [{u'name': u'Sony - 43" Class (42.5" Diag.) - LED - 2160p - Smart - 4K Ultra HD TV - Black', u'url': u'http://www.bestbuy.com/site/sony-43-class-42-5-...</msg>
<status status="PASS" endtime="20190222 13:04:29.879" starttime="20190222 13:04:29.226"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:29.880" starttime="20190222 13:04:29.879"></status>
</kw>
<doc>*Validate Query String provided*</doc>
<tags>
<tag>products</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190222 13:04:29.880" critical="yes" starttime="20190222 13:04:29.223"></status>
</test>
<test id="s1-s2-t4" name="Categories with TV in the name">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>categories</arg>
<arg>GET</arg>
<arg>{"name[$like]":"*TV*"}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:29.927" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:29.928" level="INFO">${response} = {u'skip': 0, u'total': 132, u'limit': 10, u'data': [{u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0101000', u'createdAt': u'2016-11-17T17:57:04.285Z', u'name': u'TVs'},...</msg>
<status status="PASS" endtime="20190222 13:04:29.928" starttime="20190222 13:04:29.882"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:29.930" starttime="20190222 13:04:29.929"></status>
</kw>
<doc>*Validate Query String provided*</doc>
<tags>
<tag>categories</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190222 13:04:29.930" critical="yes" starttime="20190222 13:04:29.881"></status>
</test>
<test id="s1-s2-t5" name="Find stores in Minnesota">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores</arg>
<arg>GET</arg>
<arg>{"state":"MN"}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:30.021" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:30.023" level="INFO">${response} = {u'skip': 0, u'total': 70, u'limit': 10, u'data': [{u'city': u'Hopkins', u'name': u'Minnetonka', u'zip': u'55305', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:05.708Z', u'hours': u'Mon: 10-9; T...</msg>
<status status="PASS" endtime="20190222 13:04:30.023" starttime="20190222 13:04:29.933"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:30.025" starttime="20190222 13:04:30.024"></status>
</kw>
<doc>*Validate Query String provided*</doc>
<tags>
<tag>rest_api_tests</tag>
<tag>stores</tag>
</tags>
<status status="PASS" endtime="20190222 13:04:30.026" critical="yes" starttime="20190222 13:04:29.931"></status>
</test>
<test id="s1-s2-t6" name="Find stores that sell Apple products">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores</arg>
<arg>GET</arg>
<arg>{"service.name":"Apple Shop"}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:30.109" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:30.112" level="INFO">${response} = {u'skip': 0, u'total': 756, u'limit': 10, u'data': [{u'city': u'Hopkins', u'name': u'Minnetonka', u'zip': u'55305', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:05.708Z', u'hours': u'Mon: 10-9; ...</msg>
<status status="PASS" endtime="20190222 13:04:30.112" starttime="20190222 13:04:30.029"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:30.114" starttime="20190222 13:04:30.113"></status>
</kw>
<doc>*Validate Query String provided*</doc>
<tags>
<tag>rest_api_tests</tag>
<tag>stores</tag>
</tags>
<status status="PASS" endtime="20190222 13:04:30.115" critical="yes" starttime="20190222 13:04:30.027"></status>
</test>
<test id="s1-s2-t7" name="Find Stores Within 10 Miles of Beverly Hills">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores</arg>
<arg>GET</arg>
<arg>{"near":"90210","service.name":"Windows%20Store"}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:30.156" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:30.157" level="INFO">${response} = {u'skip': 0, u'total': 0, u'limit': 10, u'data': []}</msg>
<status status="PASS" endtime="20190222 13:04:30.157" starttime="20190222 13:04:30.119"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:30.159" starttime="20190222 13:04:30.158"></status>
</kw>
<doc>*Validate Query String provided*</doc>
<tags>
<tag>rest_api_tests</tag>
<tag>stores</tag>
</tags>
<status status="PASS" endtime="20190222 13:04:30.159" critical="yes" starttime="20190222 13:04:30.117"></status>
</test>
<test id="s1-s2-t8" name="Validate Health Check Api">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>healthcheck</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:30.214" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:30.214" level="INFO">${response} = {u'uptime': 49558.848, u'documents': {u'stores': 1587, u'products': 51977, u'categories': 4314}, u'readonly': False}</msg>
<status status="PASS" endtime="20190222 13:04:30.214" starttime="20190222 13:04:30.161"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:30.216" starttime="20190222 13:04:30.215"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.216" starttime="20190222 13:04:30.215"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>healthcheck</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.220" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'uptime', u'readonly', u'documents'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-07/schema#', u'type': u'object', u'properties': {u'uptime': {u'$id': u'#/properties/uptime', u'default': 0.0, u'type': u'number', u'examples': [26675.762], u'title': u'The Uptime Schema'}, u'documents': {u'$id': u'#/properties/documents', u'required': [u'products', u'stores', u'categories'], u'type': u'object', u'properties': {u'stores': {u'$id': u'#/properties/documents/properties/stores', u'default': 0, u'type': u'integer', u'examples': [1586], u'title': u'The Stores Schema'}, u'products': {u'$id': u'#/properties/documents/properties/products', u'default': 0, u'type': u'integer', u'examples': [51977], u'title': u'The Products Schema'}, u'categories': {u'$id': u'#/properties/documents/properties/categories', u'default': 0, u'type': u'integer', u'examples': [4314], u'title': u'The Categories Schema'}}, u'title': u'The Documents Schema'}, u'readonly': {u'$id': u'#/properties/readonly', u'default': False, u'type': u'boolean', u'examples': [False], u'title': u'The Readonly Schema'}}}</msg>
<status status="PASS" endtime="20190222 13:04:30.221" starttime="20190222 13:04:30.216"></status>
</kw>
<doc>*Validate Health Check*</doc>
<tags>
<tag>healthcheck</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190222 13:04:30.221" critical="yes" starttime="20190222 13:04:30.160"></status>
</test>
<test id="s1-s2-t9" name="Validate version Api">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>version</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:30.230" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:30.230" level="INFO">${response} = {u'version': u'1.1.0'}</msg>
<status status="PASS" endtime="20190222 13:04:30.230" starttime="20190222 13:04:30.223"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:30.231" starttime="20190222 13:04:30.231"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>version</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.235" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'version'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'version': {u'title': u'The Version Schema', u'$id': u'#/properties/version', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'1.1.0'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:30.236" starttime="20190222 13:04:30.232"></status>
</kw>
<doc>*Validate Health Check*</doc>
<tags>
<tag>rest_api_tests</tag>
<tag>version</tag>
</tags>
<status status="PASS" endtime="20190222 13:04:30.236" critical="yes" starttime="20190222 13:04:30.222"></status>
</test>
<doc>Best Buy API Playground Test Suite</doc>
<status status="PASS" endtime="20190222 13:04:30.238" starttime="20190222 13:04:26.119"></status>
</suite>
<suite source="/Users/vumesh/Documents/vartest/varun-umesh/RestApiAutomation/TESTSUITES/Products_Endpoint_TestSuite.robot" id="s1-s3" name="Products Endpoint TestSuite">
<kw type="setup" name="Initialize Domain">
<arguments>
<arg>${domain}</arg>
</arguments>
<kw name="Initialize Domain" library="RestConnection">
<doc>Initialize Domain url for the tests</doc>
<arguments>
<arg>${domain}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:30.255" starttime="20190222 13:04:30.253"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.255" starttime="20190222 13:04:30.252"></status>
</kw>
<test id="s1-s3-t1" name="Fetch All records - GET | Validate JSON Schema of the Response">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:30.562" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:30.562" level="INFO">${response} = {u'skip': 0, u'total': 51977, u'limit': 10, u'data': [{u'name': u'Duracell - AA 1.5V CopperTop Batteries (4-Pack)', u'url': u'http://www.bestbuy.com/site/duracell-aa-1-5v-coppertop-batteries-4-pack/48...</msg>
<status status="PASS" endtime="20190222 13:04:30.562" starttime="20190222 13:04:30.257"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:30.564" starttime="20190222 13:04:30.563"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.564" starttime="20190222 13:04:30.563"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>${response["data"]}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.567" level="INFO">${response_data} = [{u'name': u'Duracell - AA 1.5V CopperTop Batteries (4-Pack)', u'url': u'http://www.bestbuy.com/site/duracell-aa-1-5v-coppertop-batteries-4-pack/48530.p?id=1099385268988&amp;skuId=48530&amp;cmp=RMXCC', u'pric...</msg>
<status status="PASS" endtime="20190222 13:04:30.567" starttime="20190222 13:04:30.565"></status>
</kw>
<kw type="for" name="${item} IN [ @{response_data} ]">
<kw type="foritem" name="${item} = {u'name': u'Duracell - AA 1.5V CopperTop Batteries (4-Pack)', u'url': u'http://www.bestbuy.com/site/duracell-aa-1-5v-coppertop-batteries-4-pack/48530.p?id=1099385268988&amp;skuId=48530&amp;cmp=RMXCC', u'price...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.571" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:30.571" starttime="20190222 13:04:30.568"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.571" starttime="20190222 13:04:30.568"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Duracell - AA Batteries (8-Pack)', u'url': u'http://www.bestbuy.com/site/duracell-aa-batteries-8-pack/127687.p?id=1051384045676&amp;skuId=127687&amp;cmp=RMXCC', u'price': 7.49, u'upc': u'041333825...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.575" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:30.575" starttime="20190222 13:04:30.572"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.575" starttime="20190222 13:04:30.572"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Energizer - MAX Batteries AA (4-Pack)', u'url': u'http://www.bestbuy.com/site/energizer-max-batteries-aa-4-pack/150115.p?id=1051384046217&amp;skuId=150115&amp;cmp=RMXCC', u'price': 4.99, u'upc': u...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.579" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:30.579" starttime="20190222 13:04:30.576"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.580" starttime="20190222 13:04:30.576"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Duracell - C Batteries (4-Pack)', u'url': u'http://www.bestbuy.com/site/duracell-c-batteries-4-pack/185230.p?id=1051384046486&amp;skuId=185230&amp;cmp=RMXCC', u'price': 8.99, u'upc': u'04133344001...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.583" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:30.583" starttime="20190222 13:04:30.580"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.583" starttime="20190222 13:04:30.580"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Duracell - D Batteries (4-Pack)', u'url': u'http://www.bestbuy.com/site/duracell-d-batteries-4-pack/185267.p?id=1051384046551&amp;skuId=185267&amp;cmp=RMXCC', u'price': 9.99, u'upc': u'04133343001...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.590" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:30.590" starttime="20190222 13:04:30.584"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.591" starttime="20190222 13:04:30.584"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Pioneer - 4&quot; 3-Way Surface-Mount Speakers with IMPP Composite Cones (Pair) - Black', u'url': u'http://www.bestbuy.com/site/pioneer-4-3-way-surface-mount-speakers-with-impp-composite-cones-...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.596" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:30.597" starttime="20190222 13:04:30.592"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.597" starttime="20190222 13:04:30.591"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Duracell - 9V Batteries (2-Pack)', u'url': u'http://www.bestbuy.com/site/duracell-9v-batteries-2-pack/312290.p?id=1051384050321&amp;skuId=312290&amp;cmp=RMXCC', u'price': 7.99, u'upc': u'041333216...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.602" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:30.602" starttime="20190222 13:04:30.598"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.602" starttime="20190222 13:04:30.598"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Energizer - N Cell E90 Batteries (2-Pack)', u'url': u'http://www.bestbuy.com/site/energizer-n-cell-e90-batteries-2-pack/333179.p?id=1185268509951&amp;skuId=333179&amp;cmp=RMXCC', u'price': 5.99, u...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.605" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:30.606" starttime="20190222 13:04:30.603"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.606" starttime="20190222 13:04:30.603"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Metra - Radio Installation Dash Kit for Most 1989-2000 Ford, Lincoln &amp; Mercury Vehicles - Black', u'url': u'http://www.bestbuy.com/site/metra-radio-installation-dash-kit-for-most-1989-2000...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.609" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:30.609" starttime="20190222 13:04:30.606"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.609" starttime="20190222 13:04:30.606"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Metra - Radio Dash Multikit for Select GM Vehicles - Black', u'url': u'http://www.bestbuy.com/site/metra-radio-dash-multikit-for-select-gm-vehicles-black/346646.p?id=1210376657731&amp;skuId=34...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.612" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:30.613" starttime="20190222 13:04:30.610"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.613" starttime="20190222 13:04:30.609"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.613" starttime="20190222 13:04:30.567"></status>
</kw>
<doc>*Validate - Products endpoint for method - GET*</doc>
<tags>
<tag>products</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190222 13:04:30.613" critical="yes" starttime="20190222 13:04:30.255"></status>
</test>
<test id="s1-s3-t2" name="Create , Fetch, Update and Delete New record - POST, GET, PATCH, DELETE | Validate JSON Schema of each of the Responses">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${product}</arg>
<arg>{"name": "Test Create product", "type": "Hardware", "price": 200, "shipping": 0,"upc": "string","description": "test Product being added","manufacturer": "Test manufacturer","model": "test model","url": "test url","image": "test image"}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.617" level="INFO">${product} = {"name": "Test Create product", "type": "Hardware", "price": 200, "shipping": 0,"upc": "string","description": "test Product being added","manufacturer": "Test manufacturer","model": "test model","url...</msg>
<status status="PASS" endtime="20190222 13:04:30.617" starttime="20190222 13:04:30.615"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products</arg>
<arg>POST</arg>
<arg>{}</arg>
<arg>${product}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${created_product_response}</var>
</assign>
<msg timestamp="20190222 13:04:30.636" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:30.637" level="INFO">${created_product_response} = {u'description': u'test Product being added', u'url': u'test url', u'price': 200, u'upc': u'string', u'shipping': 0, u'name': u'Test Create product', u'image': u'test image', u'updatedAt': u'2019-02-2...</msg>
<status status="PASS" endtime="20190222 13:04:30.637" starttime="20190222 13:04:30.617"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${id}</arg>
<arg>${created_product_response["id"]}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.639" level="INFO">${id} = 9999738</msg>
<status status="PASS" endtime="20190222 13:04:30.639" starttime="20190222 13:04:30.637"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:30.643" starttime="20190222 13:04:30.640"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.644" starttime="20190222 13:04:30.639"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${created_product_response}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.651" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:30.653" starttime="20190222 13:04:30.645"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products/${id}</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:30.671" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:30.672" level="INFO">${response} = {u'name': u'Test Create product', u'url': u'test url', u'price': 200, u'upc': u'string', u'shipping': 0, u'categories': [], u'image': u'test image', u'updatedAt': u'2019-02-22T07:34:30.630Z', u'model'...</msg>
<status status="PASS" endtime="20190222 13:04:30.672" starttime="20190222 13:04:30.653"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:30.678" starttime="20190222 13:04:30.676"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.678" starttime="20190222 13:04:30.673"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.683" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:30.684" starttime="20190222 13:04:30.678"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${updated_product}</arg>
<arg>{"name": "Test Updated product", "type": "Hardware_Updated", "price": 500, "shipping": 0,"upc": "string","description": "Created product being updated","manufacturer": "Test manufacturer","model": "test model","url": "test url","image": "test image"}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.686" level="INFO">${updated_product} = {"name": "Test Updated product", "type": "Hardware_Updated", "price": 500, "shipping": 0,"upc": "string","description": "Created product being updated","manufacturer": "Test manufacturer","model": "te...</msg>
<status status="PASS" endtime="20190222 13:04:30.686" starttime="20190222 13:04:30.684"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products/${id}</arg>
<arg>PATCH</arg>
<arg>{}</arg>
<arg>${updated_product}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:30.703" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:30.704" level="INFO">${response} = {u'name': u'Test Updated product', u'url': u'test url', u'price': 500, u'upc': u'string', u'shipping': 0, u'image': u'test image', u'updatedAt': u'2019-02-22T07:34:30.691Z', u'model': u'test model', u...</msg>
<status status="PASS" endtime="20190222 13:04:30.704" starttime="20190222 13:04:30.687"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:30.706" starttime="20190222 13:04:30.705"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.706" starttime="20190222 13:04:30.704"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190222 13:04:30.718" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:30.721" starttime="20190222 13:04:30.707"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products/${id}</arg>
<arg>DELETE</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:30.734" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:30.734" level="INFO">${response} = {u'name': u'Test Updated product', u'url': u'test url', u'price': 500, u'upc': u'string', u'shipping': 0, u'image': u'test image', u'updatedAt': u'2019-02-22T07:34:30.691Z', u'model': u'test model', u...</msg>
<status status="PASS" endtime="20190222 13:04:30.734" starttime="20190222 13:04:30.721"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:30.738" starttime="20190222 13:04:30.736"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.739" starttime="20190222 13:04:30.735"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products/${id}</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:30.753" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:30.753" level="INFO">${response} = {u'className': u'not-found', u'errors': {}, u'message': u"No record found for id '9999738'", u'code': 404, u'name': u'NotFound'}</msg>
<status status="PASS" endtime="20190222 13:04:30.753" starttime="20190222 13:04:30.742"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:30.758" starttime="20190222 13:04:30.757"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.758" starttime="20190222 13:04:30.754"></status>
</kw>
<doc>*Validate - Products endpoint for methods - POST, GET, PATCH and DELETE*</doc>
<tags>
<tag>products</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190222 13:04:30.759" critical="yes" starttime="20190222 13:04:30.614"></status>
</test>
<doc>Best Buy API Playground Test Suite</doc>
<status status="PASS" endtime="20190222 13:04:30.760" starttime="20190222 13:04:30.241"></status>
</suite>
<suite source="/Users/vumesh/Documents/vartest/varun-umesh/RestApiAutomation/TESTSUITES/Services_Endpoint_TestSuite.robot" id="s1-s4" name="Services Endpoint TestSuite">
<kw type="setup" name="Initialize Domain">
<arguments>
<arg>${domain}</arg>
</arguments>
<kw name="Initialize Domain" library="RestConnection">
<doc>Initialize Domain url for the tests</doc>
<arguments>
<arg>${domain}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:30.996" starttime="20190222 13:04:30.995"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:30.996" starttime="20190222 13:04:30.925"></status>
</kw>
<test id="s1-s4-t1" name="Fetch All records - GET | Validate JSON Schema of the Response">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>services</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:31.015" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:31.035" level="INFO">${response} = {u'skip': 0, u'total': 28, u'limit': 10, u'data': [{u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 1, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Geek Squad Services'}, {u'updatedAt': u'2...</msg>
<status status="PASS" endtime="20190222 13:04:31.036" starttime="20190222 13:04:30.998"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:31.037" starttime="20190222 13:04:31.037"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.038" starttime="20190222 13:04:31.036"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>${response["data"]}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.040" level="INFO">${response_data} = [{u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 1, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Geek Squad Services'}, {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 2, u'createdAt': ...</msg>
<status status="PASS" endtime="20190222 13:04:31.040" starttime="20190222 13:04:31.038"></status>
</kw>
<kw type="for" name="${item} IN [ @{response_data} ]">
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 1, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Geek Squad Services'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.045" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.046" starttime="20190222 13:04:31.041"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.046" starttime="20190222 13:04:31.040"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 2, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Best Buy Mobile'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.048" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.048" starttime="20190222 13:04:31.046"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.048" starttime="20190222 13:04:31.046"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 3, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Best Buy For Business'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.050" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.050" starttime="20190222 13:04:31.049"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.050" starttime="20190222 13:04:31.048"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 4, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Apple Shop'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.052" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.052" starttime="20190222 13:04:31.051"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.053" starttime="20190222 13:04:31.051"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 5, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Hablamos Espa\xf1ol'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.055" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.055" starttime="20190222 13:04:31.053"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.055" starttime="20190222 13:04:31.053"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 6, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Camera Experience Shop '}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.057" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.057" starttime="20190222 13:04:31.056"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.057" starttime="20190222 13:04:31.055"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 7, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Electronics Recycling'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.059" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.059" starttime="20190222 13:04:31.058"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.059" starttime="20190222 13:04:31.057"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 8, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Magnolia Home Theater'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.061" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.062" starttime="20190222 13:04:31.060"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.062" starttime="20190222 13:04:31.060"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 9, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Samsung Experience Shop'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.065" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.065" starttime="20190222 13:04:31.062"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.065" starttime="20190222 13:04:31.062"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 10, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Windows Store'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.067" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.067" starttime="20190222 13:04:31.066"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.067" starttime="20190222 13:04:31.065"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.068" starttime="20190222 13:04:31.040"></status>
</kw>
<doc>*Validate - Services endpoint for method - GET*</doc>
<tags>
<tag>rest_api_tests</tag>
<tag>services</tag>
</tags>
<status status="PASS" endtime="20190222 13:04:31.068" critical="yes" starttime="20190222 13:04:30.997"></status>
</test>
<test id="s1-s4-t2" name="Create , Fetch, Update and Delete New record - POST, GET, PATCH, DELETE | Validate JSON Schema of each of the Responses">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${service}</arg>
<arg>{"name": "Test Create New Service"}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.071" level="INFO">${service} = {"name": "Test Create New Service"}</msg>
<status status="PASS" endtime="20190222 13:04:31.071" starttime="20190222 13:04:31.070"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>services</arg>
<arg>POST</arg>
<arg>{}</arg>
<arg>${service}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${created_service_response}</var>
</assign>
<msg timestamp="20190222 13:04:31.100" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:31.101" level="INFO">${created_service_response} = {u'updatedAt': u'2019-02-22T07:34:31.091Z', u'id': 42, u'createdAt': u'2019-02-22T07:34:31.091Z', u'name': u'Test Create New Service'}</msg>
<status status="PASS" endtime="20190222 13:04:31.101" starttime="20190222 13:04:31.071"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${id}</arg>
<arg>${created_service_response["id"]}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.103" level="INFO">${id} = 42</msg>
<status status="PASS" endtime="20190222 13:04:31.103" starttime="20190222 13:04:31.101"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:31.104" starttime="20190222 13:04:31.104"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.105" starttime="20190222 13:04:31.103"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${created_service_response}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.107" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.107" starttime="20190222 13:04:31.105"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>services/${id}</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:31.118" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:31.118" level="INFO">${response} = {u'updatedAt': u'2019-02-22T07:34:31.091Z', u'id': 42, u'createdAt': u'2019-02-22T07:34:31.091Z', u'name': u'Test Create New Service'}</msg>
<status status="PASS" endtime="20190222 13:04:31.118" starttime="20190222 13:04:31.108"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:31.120" starttime="20190222 13:04:31.119"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.120" starttime="20190222 13:04:31.119"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.123" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.123" starttime="20190222 13:04:31.121"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${updated_service}</arg>
<arg>{"name": "Test Update New Service"}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.127" level="INFO">${updated_service} = {"name": "Test Update New Service"}</msg>
<status status="PASS" endtime="20190222 13:04:31.127" starttime="20190222 13:04:31.124"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>services/${id}</arg>
<arg>PATCH</arg>
<arg>{}</arg>
<arg>${updated_service}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:31.138" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:31.139" level="INFO">${response} = {u'updatedAt': u'2019-02-22T07:34:31.132Z', u'id': 42, u'createdAt': u'2019-02-22T07:34:31.091Z', u'name': u'Test Update New Service'}</msg>
<status status="PASS" endtime="20190222 13:04:31.139" starttime="20190222 13:04:31.128"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:31.140" starttime="20190222 13:04:31.140"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.140" starttime="20190222 13:04:31.139"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.142" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.143" starttime="20190222 13:04:31.141"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>services/${id}</arg>
<arg>DELETE</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:31.204" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:31.204" level="INFO">${response} = {u'updatedAt': u'2019-02-22T07:34:31.132Z', u'id': 42, u'createdAt': u'2019-02-22T07:34:31.091Z', u'name': u'Test Update New Service'}</msg>
<status status="PASS" endtime="20190222 13:04:31.204" starttime="20190222 13:04:31.143"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:31.206" starttime="20190222 13:04:31.205"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.206" starttime="20190222 13:04:31.205"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>services/${id}</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:31.214" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:31.214" level="INFO">${response} = {u'className': u'not-found', u'errors': {}, u'message': u"No record found for id '42'", u'code': 404, u'name': u'NotFound'}</msg>
<status status="PASS" endtime="20190222 13:04:31.214" starttime="20190222 13:04:31.206"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:31.216" starttime="20190222 13:04:31.216"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.217" starttime="20190222 13:04:31.215"></status>
</kw>
<doc>*Validate - Services endpoint for methods - POST, GET, PATCH and DELETE*</doc>
<tags>
<tag>rest_api_tests</tag>
<tag>services</tag>
</tags>
<status status="PASS" endtime="20190222 13:04:31.217" critical="yes" starttime="20190222 13:04:31.068"></status>
</test>
<doc>Best Buy API Playground Test Suite</doc>
<status status="PASS" endtime="20190222 13:04:31.218" starttime="20190222 13:04:30.762"></status>
</suite>
<suite source="/Users/vumesh/Documents/vartest/varun-umesh/RestApiAutomation/TESTSUITES/Stores_Endpoint_TestSuite.robot" id="s1-s5" name="Stores Endpoint TestSuite">
<kw type="setup" name="Initialize Domain">
<arguments>
<arg>${domain}</arg>
</arguments>
<kw name="Initialize Domain" library="RestConnection">
<doc>Initialize Domain url for the tests</doc>
<arguments>
<arg>${domain}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:31.229" starttime="20190222 13:04:31.228"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.229" starttime="20190222 13:04:31.227"></status>
</kw>
<test id="s1-s5-t1" name="Fetch All records - GET | Validate JSON Schema of the Response">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:31.266" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:31.268" level="INFO">${response} = {u'skip': 0, u'total': 1587, u'limit': 10, u'data': [{u'city': u'Hopkins', u'name': u'Minnetonka', u'zip': u'55305', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:05.708Z', u'hours': u'Mon: 10-9;...</msg>
<status status="PASS" endtime="20190222 13:04:31.268" starttime="20190222 13:04:31.231"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:31.270" starttime="20190222 13:04:31.269"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.270" starttime="20190222 13:04:31.268"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>${response["data"]}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.273" level="INFO">${response_data} = [{u'city': u'Hopkins', u'name': u'Minnetonka', u'zip': u'55305', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:05.708Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: ...</msg>
<status status="PASS" endtime="20190222 13:04:31.274" starttime="20190222 13:04:31.270"></status>
</kw>
<kw type="for" name="${item} IN [ @{response_data} ]">
<kw type="foritem" name="${item} = {u'city': u'Hopkins', u'name': u'Minnetonka', u'zip': u'55305', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:05.708Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 1...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.278" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.278" starttime="20190222 13:04:31.275"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.279" starttime="20190222 13:04:31.275"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Inver Grove Heights', u'name': u'Inver Grove Heights', u'zip': u'55077', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:05.831Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.282" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.282" starttime="20190222 13:04:31.279"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.282" starttime="20190222 13:04:31.279"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Roseville', u'name': u'Roseville', u'zip': u'55113', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:05.853Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: ...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.286" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.286" starttime="20190222 13:04:31.283"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.286" starttime="20190222 13:04:31.283"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Burnsville', u'name': u'Burnsville', u'zip': u'55337', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:06.108Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.290" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.290" starttime="20190222 13:04:31.287"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.290" starttime="20190222 13:04:31.286"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Maplewood', u'name': u'Maplewood', u'zip': u'55109', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:04.414Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: ...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.294" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.294" starttime="20190222 13:04:31.291"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.294" starttime="20190222 13:04:31.291"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Blaine', u'name': u'Northtown', u'zip': u'55434', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:04.542Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.298" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.298" starttime="20190222 13:04:31.295"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.298" starttime="20190222 13:04:31.295"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Saint Cloud', u'name': u'St Cloud', u'zip': u'56301', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:04.575Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 9-9; Sat: ...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.301" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.302" starttime="20190222 13:04:31.299"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.302" starttime="20190222 13:04:31.299"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Fargo', u'name': u'Fargo', u'zip': u'58103', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:04.603Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 9-9; Sat: 9-9; Sun:...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.305" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.306" starttime="20190222 13:04:31.303"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.306" starttime="20190222 13:04:31.302"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Rochester', u'name': u'Rochester', u'zip': u'55901', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:04.756Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: ...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.309" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.309" starttime="20190222 13:04:31.306"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.309" starttime="20190222 13:04:31.306"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Oakdale', u'name': u'Oakdale', u'zip': u'55128', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:04.813Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.313" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.313" starttime="20190222 13:04:31.310"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.313" starttime="20190222 13:04:31.309"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.313" starttime="20190222 13:04:31.274"></status>
</kw>
<doc>*Validate - Stores endpoint for method - GET*</doc>
<tags>
<tag>rest_api_tests</tag>
<tag>stores</tag>
</tags>
<status status="PASS" endtime="20190222 13:04:31.314" critical="yes" starttime="20190222 13:04:31.229"></status>
</test>
<test id="s1-s5-t2" name="Create , Fetch, Update and Delete New record - POST, GET, PATCH, DELETE | Validate JSON Schema of each of the Responses">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${store}</arg>
<arg>{"name": "Test Create New Store","type": "BigBox","address": "123 Fake St","address2": "","city": "Springfield","state": "MN","zip": "55123","lat": 44.969658,"lng": -93.449539,"hours": "Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8"}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.317" level="INFO">${store} = {"name": "Test Create New Store","type": "BigBox","address": "123 Fake St","address2": "","city": "Springfield","state": "MN","zip": "55123","lat": 44.969658,"lng": -93.449539,"hours": "Mon: 10-9; Tue...</msg>
<status status="PASS" endtime="20190222 13:04:31.317" starttime="20190222 13:04:31.316"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores</arg>
<arg>POST</arg>
<arg>{}</arg>
<arg>${store}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${created_store_response}</var>
</assign>
<msg timestamp="20190222 13:04:31.342" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:31.342" level="INFO">${created_store_response} = {u'city': u'Springfield', u'name': u'Test Create New Store', u'zip': u'55123', u'address2': u'', u'updatedAt': u'2019-02-22T07:34:31.332Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fr...</msg>
<status status="PASS" endtime="20190222 13:04:31.342" starttime="20190222 13:04:31.318"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${id}</arg>
<arg>${created_store_response["id"]}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.345" level="INFO">${id} = 8978</msg>
<status status="PASS" endtime="20190222 13:04:31.345" starttime="20190222 13:04:31.343"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:31.347" starttime="20190222 13:04:31.346"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.347" starttime="20190222 13:04:31.346"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${created_store_response}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.351" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.351" starttime="20190222 13:04:31.347"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores/${id}</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:31.385" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:31.385" level="INFO">${response} = {u'city': u'Springfield', u'name': u'Test Create New Store', u'zip': u'55123', u'address2': u'', u'updatedAt': u'2019-02-22T07:34:31.332Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fr...</msg>
<status status="PASS" endtime="20190222 13:04:31.385" starttime="20190222 13:04:31.352"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:31.387" starttime="20190222 13:04:31.386"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.387" starttime="20190222 13:04:31.386"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.390" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.390" starttime="20190222 13:04:31.387"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${updated_store}</arg>
<arg>{"name": "Test Update Created Store","type": "BigBox_updated","address": "123 Fake St","address2_updated": "updated","city": "Springfield_updated","state": "MN","zip": "55123","lat": 44.969658,"lng": -93.449539,"hours": "Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8"}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.392" level="INFO">${updated_store} = {"name": "Test Update Created Store","type": "BigBox_updated","address": "123 Fake St","address2_updated": "updated","city": "Springfield_updated","state": "MN","zip": "55123","lat": 44.969658,"lng": ...</msg>
<status status="PASS" endtime="20190222 13:04:31.392" starttime="20190222 13:04:31.390"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores/${id}</arg>
<arg>PATCH</arg>
<arg>{}</arg>
<arg>${updated_store}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:31.406" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:31.407" level="INFO">${response} = {u'city': u'Springfield_updated', u'name': u'Test Update Created Store', u'zip': u'55123', u'address2': u'', u'updatedAt': u'2019-02-22T07:34:31.396Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thu...</msg>
<status status="PASS" endtime="20190222 13:04:31.407" starttime="20190222 13:04:31.392"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:31.408" starttime="20190222 13:04:31.408"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.408" starttime="20190222 13:04:31.407"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190222 13:04:31.413" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190222 13:04:31.413" starttime="20190222 13:04:31.409"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores/${id}</arg>
<arg>DELETE</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:31.431" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:31.431" level="INFO">${response} = {u'city': u'Springfield_updated', u'name': u'Test Update Created Store', u'zip': u'55123', u'address2': u'', u'updatedAt': u'2019-02-22T07:34:31.396Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thu...</msg>
<status status="PASS" endtime="20190222 13:04:31.431" starttime="20190222 13:04:31.413"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:31.435" starttime="20190222 13:04:31.434"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.436" starttime="20190222 13:04:31.432"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores/${id}</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190222 13:04:31.453" level="INFO">${result} = True</msg>
<msg timestamp="20190222 13:04:31.453" level="INFO">${response} = {u'className': u'not-found', u'errors': {}, u'message': u"No record found for id '8978'", u'code': 404, u'name': u'NotFound'}</msg>
<status status="PASS" endtime="20190222 13:04:31.454" starttime="20190222 13:04:31.436"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190222 13:04:31.456" starttime="20190222 13:04:31.456"></status>
</kw>
<status status="PASS" endtime="20190222 13:04:31.457" starttime="20190222 13:04:31.455"></status>
</kw>
<doc>*Validate - Stores endpoint for methods - POST, GET, PATCH and DELETE*</doc>
<tags>
<tag>rest_api_tests</tag>
<tag>stores</tag>
</tags>
<status status="PASS" endtime="20190222 13:04:31.457" critical="yes" starttime="20190222 13:04:31.315"></status>
</test>
<doc>Best Buy API Playground Test Suite</doc>
<status status="PASS" endtime="20190222 13:04:31.458" starttime="20190222 13:04:31.220"></status>
</suite>
<status status="PASS" endtime="20190222 13:04:31.464" starttime="20190222 13:04:23.870"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="17">Critical Tests</stat>
<stat fail="0" pass="17">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="3">categories</stat>
<stat fail="0" pass="1">healthcheck</stat>
<stat fail="0" pass="5">products</stat>
<stat fail="0" pass="17">rest_api_tests</stat>
<stat fail="0" pass="2">services</stat>
<stat fail="0" pass="5">stores</stat>
<stat fail="0" pass="1">version</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="Categories Endpoint TestSuite &amp; Functional Tests &amp; Products Endpoint TestSuite &amp; Services Endpoint TestSuite &amp; Stores Endpoint TestSuite" pass="17">Categories Endpoint TestSuite &amp; Functional Tests &amp; Products Endpoint TestSuite &amp; Services Endpoint TestSuite &amp; Stores Endpoint TestSuite</stat>
<stat fail="0" id="s1-s1" name="Categories Endpoint TestSuite" pass="2">Categories Endpoint TestSuite &amp; Functional Tests &amp; Products Endpoint TestSuite &amp; Services Endpoint TestSuite &amp; Stores Endpoint TestSuite.Categories Endpoint TestSuite</stat>
<stat fail="0" id="s1-s2" name="Functional Tests" pass="9">Categories Endpoint TestSuite &amp; Functional Tests &amp; Products Endpoint TestSuite &amp; Services Endpoint TestSuite &amp; Stores Endpoint TestSuite.Functional Tests</stat>
<stat fail="0" id="s1-s3" name="Products Endpoint TestSuite" pass="2">Categories Endpoint TestSuite &amp; Functional Tests &amp; Products Endpoint TestSuite &amp; Services Endpoint TestSuite &amp; Stores Endpoint TestSuite.Products Endpoint TestSuite</stat>
<stat fail="0" id="s1-s4" name="Services Endpoint TestSuite" pass="2">Categories Endpoint TestSuite &amp; Functional Tests &amp; Products Endpoint TestSuite &amp; Services Endpoint TestSuite &amp; Stores Endpoint TestSuite.Services Endpoint TestSuite</stat>
<stat fail="0" id="s1-s5" name="Stores Endpoint TestSuite" pass="2">Categories Endpoint TestSuite &amp; Functional Tests &amp; Products Endpoint TestSuite &amp; Services Endpoint TestSuite &amp; Stores Endpoint TestSuite.Stores Endpoint TestSuite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
