<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20190221 23:59:20.345" generator="Robot 3.1.1 (Python 2.7.10 on darwin)">
<suite id="s1" name="Categories Endpoint TestSuite &amp; Functional Tests &amp; Products Endpoint TestSuite &amp; Services Endpoint TestSuite &amp; Stores Endpoint TestSuite">
<suite source="/Users/vumesh/Documents/vartest/varun-umesh/TESTSUITES/Categories_Endpoint_TestSuite.robot" id="s1-s1" name="Categories Endpoint TestSuite">
<kw type="setup" name="Initialize Domain">
<arguments>
<arg>${domain}</arg>
</arguments>
<kw name="Initialize Domain" library="RestConnection">
<doc>Initialize Domain url for the tests</doc>
<arguments>
<arg>${domain}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:20.448" starttime="20190221 23:59:20.447"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.448" starttime="20190221 23:59:20.447"></status>
</kw>
<test id="s1-s1-t1" name="Fetch All records - GET | Validate JSON Schema of the Response">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>categories</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:20.498" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:20.498" level="INFO">${response} = {u'skip': 0, u'total': 4314, u'limit': 10, u'data': [{u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0020004', u'createdAt': u'2016-11-17T17:57:04.285Z', u'name': u'Uniqu...</msg>
<status status="PASS" endtime="20190221 23:59:20.498" starttime="20190221 23:59:20.449"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:20.499" starttime="20190221 23:59:20.499"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.499" starttime="20190221 23:59:20.499"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>${response["data"]}</arg>
</arguments>
<msg timestamp="20190221 23:59:20.500" level="INFO">${response_data} = [{u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0020004', u'createdAt': u'2016-11-17T17:57:04.285Z', u'name': u'Unique Gifts'}, {u'updatedAt': u'2016-11-17T17:57:04.899Z...</msg>
<status status="PASS" endtime="20190221 23:59:20.500" starttime="20190221 23:59:20.499"></status>
</kw>
<kw type="for" name="${item} IN [ @{response_data} ]">
<kw type="foritem" name="${item} = {u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0020004', u'createdAt': u'2016-11-17T17:57:04.285Z', u'name': u'Unique Gifts'}, {u'updatedAt': u'2016-11-17T17:57:04.899Z'...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:20.502" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:20.502" starttime="20190221 23:59:20.501"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.502" starttime="20190221 23:59:20.501"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [], u'name': u'Learning Toys', u'updatedAt': u'2016-11-17T17:57:04.285Z', u'categoryPath': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0010000', u'createdAt': u'2016-...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:20.503" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:20.503" starttime="20190221 23:59:20.502"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.503" starttime="20190221 23:59:20.502"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [], u'name': u'DVD Games', u'updatedAt': u'2016-11-17T17:57:04.285Z', u'categoryPath': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0010000', u'createdAt': u'2016-11-1...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:20.504" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:20.504" starttime="20190221 23:59:20.503"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.504" starttime="20190221 23:59:20.503"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [], u'name': u'Unique Gifts', u'updatedAt': u'2016-11-17T17:57:04.285Z', u'categoryPath': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0010000', u'createdAt': u'2016-1...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:20.505" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:20.505" starttime="20190221 23:59:20.504"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.505" starttime="20190221 23:59:20.504"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0101000', u'createdAt': u'2016-11-17T17:57:04.285Z', u'name': u'TVs'}, {u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': ...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:20.506" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:20.506" starttime="20190221 23:59:20.506"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.506" starttime="20190221 23:59:20.505"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0101001', u'createdAt': u'2016-11-17T17:57:04.285Z', u'name': u'All Flat-Panel TVs'}, {u'updatedAt': u'2016-11-17T17:57:04...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:20.507" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:20.507" starttime="20190221 23:59:20.507"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.508" starttime="20190221 23:59:20.507"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.643Z', u'id': u'pcmcat138100050024', u'createdAt': u'2016-11-17T17:57:04.643Z', u'name': u'TV &amp; Home Theater Services'}], u'name': u'All Flat-P...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:20.509" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:20.509" starttime="20190221 23:59:20.508"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.509" starttime="20190221 23:59:20.508"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0102003', u'createdAt': u'2016-11-17T17:57:04.285Z', u'name': u'Blu-ray Players'}, {u'updatedAt': u'2016-11-17T17:57:04.28...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:20.510" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:20.510" starttime="20190221 23:59:20.509"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.510" starttime="20190221 23:59:20.509"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:05.399Z', u'id': u'pcmcat205900050012', u'createdAt': u'2016-11-17T17:57:05.399Z', u'name': u'3D Blu-ray Players'}, {u'updatedAt': u'2016-11-17T17...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:20.511" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:20.511" starttime="20190221 23:59:20.510"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.511" starttime="20190221 23:59:20.510"></status>
</kw>
<kw type="foritem" name="${item} = {u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.643Z', u'id': u'pcmcat138100050024', u'createdAt': u'2016-11-17T17:57:04.643Z', u'name': u'TV &amp; Home Theater Services'}], u'name': u'DVD Player...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:20.512" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:20.512" starttime="20190221 23:59:20.511"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.512" starttime="20190221 23:59:20.511"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.512" starttime="20190221 23:59:20.500"></status>
</kw>
<doc>*Validate - categories endpoint for method - GET*</doc>
<tags>
<tag>categories</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190221 23:59:20.512" critical="yes" starttime="20190221 23:59:20.448"></status>
</test>
<test id="s1-s1-t2" name="Create , Fetch, Update and Delete New record - POST, GET, PATCH, DELETE | Validate JSON Schema of each of the Responses">
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>8</arg>
<arg>[LETTERS]</arg>
</arguments>
<assign>
<var>${random_id}</var>
</assign>
<msg timestamp="20190221 23:59:20.513" level="INFO">${random_id} = JKqNarYl</msg>
<status status="PASS" endtime="20190221 23:59:20.513" starttime="20190221 23:59:20.513"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${random_id}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:20.514" starttime="20190221 23:59:20.514"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${product}</arg>
<arg>{"id": "${random_id}", "name": "Test Category created"}</arg>
</arguments>
<msg timestamp="20190221 23:59:20.515" level="INFO">${product} = {"id": "JKqNarYl", "name": "Test Category created"}</msg>
<status status="PASS" endtime="20190221 23:59:20.515" starttime="20190221 23:59:20.514"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>categories</arg>
<arg>POST</arg>
<arg>{}</arg>
<arg>${product}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${created_product_response}</var>
</assign>
<msg timestamp="20190221 23:59:20.524" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:20.525" level="INFO">${created_product_response} = {u'updatedAt': u'2019-02-21T18:29:20.521Z', u'id': u'JKqNarYl', u'createdAt': u'2019-02-21T18:29:20.521Z', u'name': u'Test Category created'}</msg>
<status status="PASS" endtime="20190221 23:59:20.525" starttime="20190221 23:59:20.515"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${id}</arg>
<arg>${created_product_response["id"]}</arg>
</arguments>
<msg timestamp="20190221 23:59:20.526" level="INFO">${id} = JKqNarYl</msg>
<status status="PASS" endtime="20190221 23:59:20.526" starttime="20190221 23:59:20.525"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:20.527" starttime="20190221 23:59:20.527"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.527" starttime="20190221 23:59:20.527"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>categories/${id}</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:20.534" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:20.534" level="INFO">${response} = {u'subCategories': [], u'name': u'Test Category created', u'updatedAt': u'2019-02-21T18:29:20.521Z', u'categoryPath': [], u'id': u'JKqNarYl', u'createdAt': u'2019-02-21T18:29:20.521Z'}</msg>
<status status="PASS" endtime="20190221 23:59:20.534" starttime="20190221 23:59:20.527"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:20.535" starttime="20190221 23:59:20.535"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.535" starttime="20190221 23:59:20.534"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190221 23:59:20.536" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:20.536" starttime="20190221 23:59:20.535"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${updated_product}</arg>
<arg>{"name": "Test Update New category"}</arg>
</arguments>
<msg timestamp="20190221 23:59:20.537" level="INFO">${updated_product} = {"name": "Test Update New category"}</msg>
<status status="PASS" endtime="20190221 23:59:20.537" starttime="20190221 23:59:20.536"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>categories/${id}</arg>
<arg>PATCH</arg>
<arg>{}</arg>
<arg>${updated_product}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:20.542" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:20.542" level="INFO">${response} = {u'updatedAt': u'2019-02-21T18:29:20.538Z', u'id': u'JKqNarYl', u'createdAt': u'2019-02-21T18:29:20.521Z', u'name': u'Test Update New category'}</msg>
<status status="PASS" endtime="20190221 23:59:20.542" starttime="20190221 23:59:20.537"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:20.543" starttime="20190221 23:59:20.543"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.543" starttime="20190221 23:59:20.543"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>categories</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190221 23:59:20.545" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'id'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'id': {u'title': u'The Id Schema', u'$id': u'#/properties/id', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:20.545" starttime="20190221 23:59:20.544"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>categories/${id}</arg>
<arg>DELETE</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:20.593" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:20.593" level="INFO">${response} = {u'updatedAt': u'2019-02-21T18:29:20.538Z', u'id': u'JKqNarYl', u'createdAt': u'2019-02-21T18:29:20.521Z', u'name': u'Test Update New category'}</msg>
<status status="PASS" endtime="20190221 23:59:20.593" starttime="20190221 23:59:20.545"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:20.594" starttime="20190221 23:59:20.593"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.594" starttime="20190221 23:59:20.593"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>categories/${id}</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:20.598" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:20.598" level="INFO">${response} = {u'className': u'not-found', u'errors': {}, u'message': u"No record found for id 'JKqNarYl'", u'code': 404, u'name': u'NotFound'}</msg>
<status status="PASS" endtime="20190221 23:59:20.598" starttime="20190221 23:59:20.594"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:20.599" starttime="20190221 23:59:20.599"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.599" starttime="20190221 23:59:20.599"></status>
</kw>
<doc>*Validate - categories endpoint for methods - POST, GET, PATCH and DELETE*</doc>
<tags>
<tag>categories</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190221 23:59:20.599" critical="yes" starttime="20190221 23:59:20.513"></status>
</test>
<doc>Best Buy API Playground Test Suite</doc>
<status status="PASS" endtime="20190221 23:59:20.600" starttime="20190221 23:59:20.364"></status>
</suite>
<suite source="/Users/vumesh/Documents/vartest/varun-umesh/TESTSUITES/Functional_Tests.robot" id="s1-s2" name="Functional Tests">
<kw type="setup" name="Initialize Domain">
<arguments>
<arg>${domain}</arg>
</arguments>
<kw name="Initialize Domain" library="RestConnection">
<doc>Initialize Domain url for the tests</doc>
<arguments>
<arg>${domain}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:20.604" starttime="20190221 23:59:20.604"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:20.604" starttime="20190221 23:59:20.604"></status>
</kw>
<test id="s1-s2-t1" name="Fetch Highest Priced Products">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products</arg>
<arg>GET</arg>
<arg>{"$sort[price]":"-1"}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:20.772" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:20.772" level="INFO">${response} = {u'skip': 0, u'total': 51977, u'limit': 10, u'data': [{u'name': u'Sony - ES SXRD 3D-Ready 4K Home Theater Projector - Black', u'url': u'http://www.bestbuy.com/site/sony-es-sxrd-3d-ready-4k-home-theate...</msg>
<status status="PASS" endtime="20190221 23:59:20.772" starttime="20190221 23:59:20.605"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:20.772" starttime="20190221 23:59:20.772"></status>
</kw>
<doc>*Validate Query String provided*</doc>
<tags>
<tag>products</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190221 23:59:20.773" critical="yes" starttime="20190221 23:59:20.604"></status>
</test>
<test id="s1-s2-t2" name="Product Name and Description Only">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products</arg>
<arg>GET</arg>
<arg>{"$select[]":["name","description"]}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:20.796" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:20.796" level="INFO">${response} = {u'skip': 0, u'total': 51977, u'limit': 10, u'data': [{u'name': u'Duracell - AA 1.5V CopperTop Batteries (4-Pack)', u'description': u'Long-lasting energy; DURALOCK Power Preserve technology; for toys,...</msg>
<status status="PASS" endtime="20190221 23:59:20.796" starttime="20190221 23:59:20.773"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:20.796" starttime="20190221 23:59:20.796"></status>
</kw>
<doc>*Validate Query String provided*</doc>
<tags>
<tag>products</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190221 23:59:20.797" critical="yes" starttime="20190221 23:59:20.773"></status>
</test>
<test id="s1-s2-t3" name="TVs with free shipping and price between $500 and $800">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products</arg>
<arg>GET</arg>
<arg>{"category.name":"TVs","price[$gt]":"500","price[$lt]":"800","shipping[$eq]":"0"}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:20.990" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:20.990" level="INFO">${response} = {u'skip': 0, u'total': 29, u'limit': 10, u'data': [{u'name': u'Sony - 43" Class (42.5" Diag.) - LED - 2160p - Smart - 4K Ultra HD TV - Black', u'url': u'http://www.bestbuy.com/site/sony-43-class-42-5-...</msg>
<status status="PASS" endtime="20190221 23:59:20.990" starttime="20190221 23:59:20.797"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:20.991" starttime="20190221 23:59:20.990"></status>
</kw>
<doc>*Validate Query String provided*</doc>
<tags>
<tag>products</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190221 23:59:20.991" critical="yes" starttime="20190221 23:59:20.797"></status>
</test>
<test id="s1-s2-t4" name="Categories with TV in the name">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>categories</arg>
<arg>GET</arg>
<arg>{"name[$like]":"*TV*"}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.010" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.010" level="INFO">${response} = {u'skip': 0, u'total': 132, u'limit': 10, u'data': [{u'subCategories': [{u'updatedAt': u'2016-11-17T17:57:04.285Z', u'id': u'abcat0101000', u'createdAt': u'2016-11-17T17:57:04.285Z', u'name': u'TVs'},...</msg>
<status status="PASS" endtime="20190221 23:59:21.010" starttime="20190221 23:59:20.992"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.011" starttime="20190221 23:59:21.010"></status>
</kw>
<doc>*Validate Query String provided*</doc>
<tags>
<tag>categories</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190221 23:59:21.011" critical="yes" starttime="20190221 23:59:20.991"></status>
</test>
<test id="s1-s2-t5" name="Find stores in Minnesota">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores</arg>
<arg>GET</arg>
<arg>{"state":"MN"}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.035" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.035" level="INFO">${response} = {u'skip': 0, u'total': 70, u'limit': 10, u'data': [{u'city': u'Hopkins', u'name': u'Minnetonka', u'zip': u'55305', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:05.708Z', u'hours': u'Mon: 10-9; T...</msg>
<status status="PASS" endtime="20190221 23:59:21.035" starttime="20190221 23:59:21.012"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.036" starttime="20190221 23:59:21.036"></status>
</kw>
<doc>*Validate Query String provided*</doc>
<tags>
<tag>rest_api_tests</tag>
<tag>stores</tag>
</tags>
<status status="PASS" endtime="20190221 23:59:21.036" critical="yes" starttime="20190221 23:59:21.011"></status>
</test>
<test id="s1-s2-t6" name="Find stores that sell Apple products">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores</arg>
<arg>GET</arg>
<arg>{"service.name":"Apple Shop"}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.060" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.060" level="INFO">${response} = {u'skip': 0, u'total': 756, u'limit': 10, u'data': [{u'city': u'Hopkins', u'name': u'Minnetonka', u'zip': u'55305', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:05.708Z', u'hours': u'Mon: 10-9; ...</msg>
<status status="PASS" endtime="20190221 23:59:21.060" starttime="20190221 23:59:21.037"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.061" starttime="20190221 23:59:21.061"></status>
</kw>
<doc>*Validate Query String provided*</doc>
<tags>
<tag>rest_api_tests</tag>
<tag>stores</tag>
</tags>
<status status="PASS" endtime="20190221 23:59:21.061" critical="yes" starttime="20190221 23:59:21.036"></status>
</test>
<test id="s1-s2-t7" name="Find Stores Within 10 Miles of Beverly Hills">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores</arg>
<arg>GET</arg>
<arg>{"near":"90210","service.name":"Windows%20Store"}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.068" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.068" level="INFO">${response} = {u'skip': 0, u'total': 0, u'limit': 10, u'data': []}</msg>
<status status="PASS" endtime="20190221 23:59:21.068" starttime="20190221 23:59:21.062"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.069" starttime="20190221 23:59:21.068"></status>
</kw>
<doc>*Validate Query String provided*</doc>
<tags>
<tag>rest_api_tests</tag>
<tag>stores</tag>
</tags>
<status status="PASS" endtime="20190221 23:59:21.069" critical="yes" starttime="20190221 23:59:21.062"></status>
</test>
<test id="s1-s2-t8" name="Validate Health Check Api">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>healthcheck</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.092" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.092" level="INFO">${response} = {u'uptime': 33607.769, u'documents': {u'stores': 1587, u'products': 51977, u'categories': 4314}, u'readonly': False}</msg>
<status status="PASS" endtime="20190221 23:59:21.093" starttime="20190221 23:59:21.070"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.093" starttime="20190221 23:59:21.093"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.093" starttime="20190221 23:59:21.093"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>healthcheck</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.095" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'uptime', u'readonly', u'documents'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-07/schema#', u'type': u'object', u'properties': {u'uptime': {u'$id': u'#/properties/uptime', u'default': 0.0, u'type': u'number', u'examples': [26675.762], u'title': u'The Uptime Schema'}, u'documents': {u'$id': u'#/properties/documents', u'required': [u'products', u'stores', u'categories'], u'type': u'object', u'properties': {u'stores': {u'$id': u'#/properties/documents/properties/stores', u'default': 0, u'type': u'integer', u'examples': [1586], u'title': u'The Stores Schema'}, u'products': {u'$id': u'#/properties/documents/properties/products', u'default': 0, u'type': u'integer', u'examples': [51977], u'title': u'The Products Schema'}, u'categories': {u'$id': u'#/properties/documents/properties/categories', u'default': 0, u'type': u'integer', u'examples': [4314], u'title': u'The Categories Schema'}}, u'title': u'The Documents Schema'}, u'readonly': {u'$id': u'#/properties/readonly', u'default': False, u'type': u'boolean', u'examples': [False], u'title': u'The Readonly Schema'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.095" starttime="20190221 23:59:21.094"></status>
</kw>
<doc>*Validate Health Check*</doc>
<tags>
<tag>healthcheck</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190221 23:59:21.095" critical="yes" starttime="20190221 23:59:21.069"></status>
</test>
<test id="s1-s2-t9" name="Validate version Api">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>version</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.098" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.098" level="INFO">${response} = {u'version': u'1.1.0'}</msg>
<status status="PASS" endtime="20190221 23:59:21.098" starttime="20190221 23:59:21.096"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.099" starttime="20190221 23:59:21.098"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>version</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.100" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'version'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'version': {u'title': u'The Version Schema', u'$id': u'#/properties/version', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'1.1.0'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.100" starttime="20190221 23:59:21.099"></status>
</kw>
<doc>*Validate Health Check*</doc>
<tags>
<tag>rest_api_tests</tag>
<tag>version</tag>
</tags>
<status status="PASS" endtime="20190221 23:59:21.100" critical="yes" starttime="20190221 23:59:21.095"></status>
</test>
<doc>Best Buy API Playground Test Suite</doc>
<status status="PASS" endtime="20190221 23:59:21.100" starttime="20190221 23:59:20.600"></status>
</suite>
<suite source="/Users/vumesh/Documents/vartest/varun-umesh/TESTSUITES/Products_Endpoint_TestSuite.robot" id="s1-s3" name="Products Endpoint TestSuite">
<kw type="setup" name="Initialize Domain">
<arguments>
<arg>${domain}</arg>
</arguments>
<kw name="Initialize Domain" library="RestConnection">
<doc>Initialize Domain url for the tests</doc>
<arguments>
<arg>${domain}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.106" starttime="20190221 23:59:21.105"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.106" starttime="20190221 23:59:21.105"></status>
</kw>
<test id="s1-s3-t1" name="Fetch All records - GET | Validate JSON Schema of the Response">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.240" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.241" level="INFO">${response} = {u'skip': 0, u'total': 51977, u'limit': 10, u'data': [{u'name': u'Duracell - AA 1.5V CopperTop Batteries (4-Pack)', u'url': u'http://www.bestbuy.com/site/duracell-aa-1-5v-coppertop-batteries-4-pack/48...</msg>
<status status="PASS" endtime="20190221 23:59:21.241" starttime="20190221 23:59:21.107"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.241" starttime="20190221 23:59:21.241"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.242" starttime="20190221 23:59:21.241"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>${response["data"]}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.243" level="INFO">${response_data} = [{u'name': u'Duracell - AA 1.5V CopperTop Batteries (4-Pack)', u'url': u'http://www.bestbuy.com/site/duracell-aa-1-5v-coppertop-batteries-4-pack/48530.p?id=1099385268988&amp;skuId=48530&amp;cmp=RMXCC', u'pric...</msg>
<status status="PASS" endtime="20190221 23:59:21.243" starttime="20190221 23:59:21.242"></status>
</kw>
<kw type="for" name="${item} IN [ @{response_data} ]">
<kw type="foritem" name="${item} = {u'name': u'Duracell - AA 1.5V CopperTop Batteries (4-Pack)', u'url': u'http://www.bestbuy.com/site/duracell-aa-1-5v-coppertop-batteries-4-pack/48530.p?id=1099385268988&amp;skuId=48530&amp;cmp=RMXCC', u'price...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.244" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.244" starttime="20190221 23:59:21.243"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.245" starttime="20190221 23:59:21.243"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Duracell - AA Batteries (8-Pack)', u'url': u'http://www.bestbuy.com/site/duracell-aa-batteries-8-pack/127687.p?id=1051384045676&amp;skuId=127687&amp;cmp=RMXCC', u'price': 7.49, u'upc': u'041333825...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.246" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.246" starttime="20190221 23:59:21.245"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.246" starttime="20190221 23:59:21.245"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Energizer - MAX Batteries AA (4-Pack)', u'url': u'http://www.bestbuy.com/site/energizer-max-batteries-aa-4-pack/150115.p?id=1051384046217&amp;skuId=150115&amp;cmp=RMXCC', u'price': 4.99, u'upc': u...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.248" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.248" starttime="20190221 23:59:21.246"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.248" starttime="20190221 23:59:21.246"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Duracell - C Batteries (4-Pack)', u'url': u'http://www.bestbuy.com/site/duracell-c-batteries-4-pack/185230.p?id=1051384046486&amp;skuId=185230&amp;cmp=RMXCC', u'price': 8.99, u'upc': u'04133344001...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.249" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.249" starttime="20190221 23:59:21.248"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.249" starttime="20190221 23:59:21.248"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Duracell - D Batteries (4-Pack)', u'url': u'http://www.bestbuy.com/site/duracell-d-batteries-4-pack/185267.p?id=1051384046551&amp;skuId=185267&amp;cmp=RMXCC', u'price': 9.99, u'upc': u'04133343001...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.251" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.251" starttime="20190221 23:59:21.250"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.251" starttime="20190221 23:59:21.249"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Pioneer - 4&quot; 3-Way Surface-Mount Speakers with IMPP Composite Cones (Pair) - Black', u'url': u'http://www.bestbuy.com/site/pioneer-4-3-way-surface-mount-speakers-with-impp-composite-cones-...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.252" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.252" starttime="20190221 23:59:21.251"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.253" starttime="20190221 23:59:21.251"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Duracell - 9V Batteries (2-Pack)', u'url': u'http://www.bestbuy.com/site/duracell-9v-batteries-2-pack/312290.p?id=1051384050321&amp;skuId=312290&amp;cmp=RMXCC', u'price': 7.99, u'upc': u'041333216...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.254" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.254" starttime="20190221 23:59:21.253"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.254" starttime="20190221 23:59:21.253"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Energizer - N Cell E90 Batteries (2-Pack)', u'url': u'http://www.bestbuy.com/site/energizer-n-cell-e90-batteries-2-pack/333179.p?id=1185268509951&amp;skuId=333179&amp;cmp=RMXCC', u'price': 5.99, u...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.256" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.256" starttime="20190221 23:59:21.255"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.257" starttime="20190221 23:59:21.255"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Metra - Radio Installation Dash Kit for Most 1989-2000 Ford, Lincoln &amp; Mercury Vehicles - Black', u'url': u'http://www.bestbuy.com/site/metra-radio-installation-dash-kit-for-most-1989-2000...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.259" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.259" starttime="20190221 23:59:21.257"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.259" starttime="20190221 23:59:21.257"></status>
</kw>
<kw type="foritem" name="${item} = {u'name': u'Metra - Radio Dash Multikit for Select GM Vehicles - Black', u'url': u'http://www.bestbuy.com/site/metra-radio-dash-multikit-for-select-gm-vehicles-black/346646.p?id=1210376657731&amp;skuId=34...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.261" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.261" starttime="20190221 23:59:21.260"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.261" starttime="20190221 23:59:21.260"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.261" starttime="20190221 23:59:21.243"></status>
</kw>
<doc>*Validate - Products endpoint for method - GET*</doc>
<tags>
<tag>products</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190221 23:59:21.262" critical="yes" starttime="20190221 23:59:21.106"></status>
</test>
<test id="s1-s3-t2" name="Create , Fetch, Update and Delete New record - POST, GET, PATCH, DELETE | Validate JSON Schema of each of the Responses">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${product}</arg>
<arg>{"name": "Test Create product", "type": "Hardware", "price": 200, "shipping": 0,"upc": "string","description": "test Product being added","manufacturer": "Test manufacturer","model": "test model","url": "test url","image": "test image"}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.263" level="INFO">${product} = {"name": "Test Create product", "type": "Hardware", "price": 200, "shipping": 0,"upc": "string","description": "test Product being added","manufacturer": "Test manufacturer","model": "test model","url...</msg>
<status status="PASS" endtime="20190221 23:59:21.263" starttime="20190221 23:59:21.262"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products</arg>
<arg>POST</arg>
<arg>{}</arg>
<arg>${product}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${created_product_response}</var>
</assign>
<msg timestamp="20190221 23:59:21.274" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.275" level="INFO">${created_product_response} = {u'description': u'test Product being added', u'url': u'test url', u'price': 200, u'upc': u'string', u'shipping': 0, u'name': u'Test Create product', u'image': u'test image', u'updatedAt': u'2019-02-2...</msg>
<status status="PASS" endtime="20190221 23:59:21.275" starttime="20190221 23:59:21.263"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${id}</arg>
<arg>${created_product_response["id"]}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.276" level="INFO">${id} = 9999737</msg>
<status status="PASS" endtime="20190221 23:59:21.276" starttime="20190221 23:59:21.275"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.276" starttime="20190221 23:59:21.276"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.276" starttime="20190221 23:59:21.276"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${created_product_response}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.279" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.279" starttime="20190221 23:59:21.277"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products/${id}</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.286" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.286" level="INFO">${response} = {u'name': u'Test Create product', u'url': u'test url', u'price': 200, u'upc': u'string', u'shipping': 0, u'categories': [], u'image': u'test image', u'updatedAt': u'2019-02-21T18:29:21.270Z', u'model'...</msg>
<status status="PASS" endtime="20190221 23:59:21.286" starttime="20190221 23:59:21.280"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.287" starttime="20190221 23:59:21.287"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.287" starttime="20190221 23:59:21.286"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.288" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.289" starttime="20190221 23:59:21.287"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${updated_product}</arg>
<arg>{"name": "Test Updated product", "type": "Hardware_Updated", "price": 500, "shipping": 0,"upc": "string","description": "Created product being updated","manufacturer": "Test manufacturer","model": "test model","url": "test url","image": "test image"}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.289" level="INFO">${updated_product} = {"name": "Test Updated product", "type": "Hardware_Updated", "price": 500, "shipping": 0,"upc": "string","description": "Created product being updated","manufacturer": "Test manufacturer","model": "te...</msg>
<status status="PASS" endtime="20190221 23:59:21.289" starttime="20190221 23:59:21.289"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products/${id}</arg>
<arg>PATCH</arg>
<arg>{}</arg>
<arg>${updated_product}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.295" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.295" level="INFO">${response} = {u'name': u'Test Updated product', u'url': u'test url', u'price': 500, u'upc': u'string', u'shipping': 0, u'image': u'test image', u'updatedAt': u'2019-02-21T18:29:21.291Z', u'model': u'test model', u...</msg>
<status status="PASS" endtime="20190221 23:59:21.295" starttime="20190221 23:59:21.290"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.296" starttime="20190221 23:59:21.296"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.297" starttime="20190221 23:59:21.296"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>products</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.298" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'price', u'shipping', u'upc', u'description', u'manufacturer', u'model', u'url', u'image'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'description': {u'title': u'The Description Schema', u'$id': u'#/properties/description', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'url': {u'title': u'The Url Schema', u'$id': u'#/properties/url', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'price': {u'$id': u'#/properties/price', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Price Schema'}, u'upc': {u'title': u'The Upc Schema', u'$id': u'#/properties/upc', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'shipping': {u'$id': u'#/properties/shipping', u'default': 0.0, u'type': u'number', u'examples': [5.49], u'title': u'The Shipping Schema'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'model': {u'title': u'The Model Schema', u'$id': u'#/properties/model', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'image': {u'title': u'The Image Schema', u'$id': u'#/properties/image', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'manufacturer': {u'title': u'The Manufacturer Schema', u'$id': u'#/properties/manufacturer', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.298" starttime="20190221 23:59:21.297"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products/${id}</arg>
<arg>DELETE</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.304" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.304" level="INFO">${response} = {u'name': u'Test Updated product', u'url': u'test url', u'price': 500, u'upc': u'string', u'shipping': 0, u'image': u'test image', u'updatedAt': u'2019-02-21T18:29:21.291Z', u'model': u'test model', u...</msg>
<status status="PASS" endtime="20190221 23:59:21.304" starttime="20190221 23:59:21.298"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.305" starttime="20190221 23:59:21.305"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.305" starttime="20190221 23:59:21.305"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>products/${id}</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.309" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.309" level="INFO">${response} = {u'className': u'not-found', u'errors': {}, u'message': u"No record found for id '9999737'", u'code': 404, u'name': u'NotFound'}</msg>
<status status="PASS" endtime="20190221 23:59:21.310" starttime="20190221 23:59:21.305"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.310" starttime="20190221 23:59:21.310"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.310" starttime="20190221 23:59:21.310"></status>
</kw>
<doc>*Validate - Products endpoint for methods - POST, GET, PATCH and DELETE*</doc>
<tags>
<tag>products</tag>
<tag>rest_api_tests</tag>
</tags>
<status status="PASS" endtime="20190221 23:59:21.310" critical="yes" starttime="20190221 23:59:21.262"></status>
</test>
<doc>Best Buy API Playground Test Suite</doc>
<status status="PASS" endtime="20190221 23:59:21.311" starttime="20190221 23:59:21.102"></status>
</suite>
<suite source="/Users/vumesh/Documents/vartest/varun-umesh/TESTSUITES/Services_Endpoint_TestSuite.robot" id="s1-s4" name="Services Endpoint TestSuite">
<kw type="setup" name="Initialize Domain">
<arguments>
<arg>${domain}</arg>
</arguments>
<kw name="Initialize Domain" library="RestConnection">
<doc>Initialize Domain url for the tests</doc>
<arguments>
<arg>${domain}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.316" starttime="20190221 23:59:21.315"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.316" starttime="20190221 23:59:21.315"></status>
</kw>
<test id="s1-s4-t1" name="Fetch All records - GET | Validate JSON Schema of the Response">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>services</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.323" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.323" level="INFO">${response} = {u'skip': 0, u'total': 28, u'limit': 10, u'data': [{u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 1, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Geek Squad Services'}, {u'updatedAt': u'2...</msg>
<status status="PASS" endtime="20190221 23:59:21.323" starttime="20190221 23:59:21.317"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.324" starttime="20190221 23:59:21.324"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.324" starttime="20190221 23:59:21.324"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>${response["data"]}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.326" level="INFO">${response_data} = [{u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 1, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Geek Squad Services'}, {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 2, u'createdAt': ...</msg>
<status status="PASS" endtime="20190221 23:59:21.326" starttime="20190221 23:59:21.324"></status>
</kw>
<kw type="for" name="${item} IN [ @{response_data} ]">
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 1, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Geek Squad Services'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.327" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.327" starttime="20190221 23:59:21.327"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.328" starttime="20190221 23:59:21.326"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 2, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Best Buy Mobile'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.328" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.329" starttime="20190221 23:59:21.328"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.329" starttime="20190221 23:59:21.328"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 3, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Best Buy For Business'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.330" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.330" starttime="20190221 23:59:21.329"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.330" starttime="20190221 23:59:21.329"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 4, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Apple Shop'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.331" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.331" starttime="20190221 23:59:21.330"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.331" starttime="20190221 23:59:21.330"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 5, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Hablamos Espa\xf1ol'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.332" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.332" starttime="20190221 23:59:21.331"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.332" starttime="20190221 23:59:21.331"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 6, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Camera Experience Shop '}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.333" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.333" starttime="20190221 23:59:21.332"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.333" starttime="20190221 23:59:21.332"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 7, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Electronics Recycling'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.334" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.334" starttime="20190221 23:59:21.334"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.335" starttime="20190221 23:59:21.334"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 8, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Magnolia Home Theater'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.335" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.335" starttime="20190221 23:59:21.335"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.335" starttime="20190221 23:59:21.335"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 9, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Samsung Experience Shop'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.337" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.337" starttime="20190221 23:59:21.336"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.337" starttime="20190221 23:59:21.336"></status>
</kw>
<kw type="foritem" name="${item} = {u'updatedAt': u'2016-11-17T17:56:35.881Z', u'id': 10, u'createdAt': u'2016-11-17T17:56:35.881Z', u'name': u'Windows Store'}">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.338" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.338" starttime="20190221 23:59:21.337"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.338" starttime="20190221 23:59:21.337"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.338" starttime="20190221 23:59:21.326"></status>
</kw>
<doc>*Validate - Services endpoint for method - GET*</doc>
<tags>
<tag>rest_api_tests</tag>
<tag>services</tag>
</tags>
<status status="PASS" endtime="20190221 23:59:21.338" critical="yes" starttime="20190221 23:59:21.316"></status>
</test>
<test id="s1-s4-t2" name="Create , Fetch, Update and Delete New record - POST, GET, PATCH, DELETE | Validate JSON Schema of each of the Responses">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${service}</arg>
<arg>{"name": "Test Create New Service"}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.340" level="INFO">${service} = {"name": "Test Create New Service"}</msg>
<status status="PASS" endtime="20190221 23:59:21.340" starttime="20190221 23:59:21.339"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>services</arg>
<arg>POST</arg>
<arg>{}</arg>
<arg>${service}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${created_service_response}</var>
</assign>
<msg timestamp="20190221 23:59:21.348" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.348" level="INFO">${created_service_response} = {u'updatedAt': u'2019-02-21T18:29:21.344Z', u'id': 41, u'createdAt': u'2019-02-21T18:29:21.344Z', u'name': u'Test Create New Service'}</msg>
<status status="PASS" endtime="20190221 23:59:21.348" starttime="20190221 23:59:21.340"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${id}</arg>
<arg>${created_service_response["id"]}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.349" level="INFO">${id} = 41</msg>
<status status="PASS" endtime="20190221 23:59:21.349" starttime="20190221 23:59:21.348"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.350" starttime="20190221 23:59:21.350"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.350" starttime="20190221 23:59:21.350"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${created_service_response}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.351" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.351" starttime="20190221 23:59:21.350"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>services/${id}</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.355" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.355" level="INFO">${response} = {u'updatedAt': u'2019-02-21T18:29:21.344Z', u'id': 41, u'createdAt': u'2019-02-21T18:29:21.344Z', u'name': u'Test Create New Service'}</msg>
<status status="PASS" endtime="20190221 23:59:21.355" starttime="20190221 23:59:21.352"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.356" starttime="20190221 23:59:21.356"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.356" starttime="20190221 23:59:21.355"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.357" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.358" starttime="20190221 23:59:21.356"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${updated_service}</arg>
<arg>{"name": "Test Update New Service"}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.359" level="INFO">${updated_service} = {"name": "Test Update New Service"}</msg>
<status status="PASS" endtime="20190221 23:59:21.359" starttime="20190221 23:59:21.358"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>services/${id}</arg>
<arg>PATCH</arg>
<arg>{}</arg>
<arg>${updated_service}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.365" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.365" level="INFO">${response} = {u'updatedAt': u'2019-02-21T18:29:21.361Z', u'id': 41, u'createdAt': u'2019-02-21T18:29:21.344Z', u'name': u'Test Update New Service'}</msg>
<status status="PASS" endtime="20190221 23:59:21.365" starttime="20190221 23:59:21.360"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.366" starttime="20190221 23:59:21.366"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.366" starttime="20190221 23:59:21.365"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>services</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.367" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.367" starttime="20190221 23:59:21.366"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>services/${id}</arg>
<arg>DELETE</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.374" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.374" level="INFO">${response} = {u'updatedAt': u'2019-02-21T18:29:21.361Z', u'id': 41, u'createdAt': u'2019-02-21T18:29:21.344Z', u'name': u'Test Update New Service'}</msg>
<status status="PASS" endtime="20190221 23:59:21.374" starttime="20190221 23:59:21.367"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.375" starttime="20190221 23:59:21.375"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.375" starttime="20190221 23:59:21.375"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>services/${id}</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.378" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.378" level="INFO">${response} = {u'className': u'not-found', u'errors': {}, u'message': u"No record found for id '41'", u'code': 404, u'name': u'NotFound'}</msg>
<status status="PASS" endtime="20190221 23:59:21.379" starttime="20190221 23:59:21.375"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.379" starttime="20190221 23:59:21.379"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.379" starttime="20190221 23:59:21.379"></status>
</kw>
<doc>*Validate - Services endpoint for methods - POST, GET, PATCH and DELETE*</doc>
<tags>
<tag>rest_api_tests</tag>
<tag>services</tag>
</tags>
<status status="PASS" endtime="20190221 23:59:21.379" critical="yes" starttime="20190221 23:59:21.339"></status>
</test>
<doc>Best Buy API Playground Test Suite</doc>
<status status="PASS" endtime="20190221 23:59:21.380" starttime="20190221 23:59:21.312"></status>
</suite>
<suite source="/Users/vumesh/Documents/vartest/varun-umesh/TESTSUITES/Stores_Endpoint_TestSuite.robot" id="s1-s5" name="Stores Endpoint TestSuite">
<kw type="setup" name="Initialize Domain">
<arguments>
<arg>${domain}</arg>
</arguments>
<kw name="Initialize Domain" library="RestConnection">
<doc>Initialize Domain url for the tests</doc>
<arguments>
<arg>${domain}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.385" starttime="20190221 23:59:21.385"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.385" starttime="20190221 23:59:21.385"></status>
</kw>
<test id="s1-s5-t1" name="Fetch All records - GET | Validate JSON Schema of the Response">
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.407" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.408" level="INFO">${response} = {u'skip': 0, u'total': 1587, u'limit': 10, u'data': [{u'city': u'Hopkins', u'name': u'Minnetonka', u'zip': u'55305', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:05.708Z', u'hours': u'Mon: 10-9;...</msg>
<status status="PASS" endtime="20190221 23:59:21.408" starttime="20190221 23:59:21.386"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.409" starttime="20190221 23:59:21.409"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.409" starttime="20190221 23:59:21.408"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>${response["data"]}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.411" level="INFO">${response_data} = [{u'city': u'Hopkins', u'name': u'Minnetonka', u'zip': u'55305', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:05.708Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: ...</msg>
<status status="PASS" endtime="20190221 23:59:21.411" starttime="20190221 23:59:21.409"></status>
</kw>
<kw type="for" name="${item} IN [ @{response_data} ]">
<kw type="foritem" name="${item} = {u'city': u'Hopkins', u'name': u'Minnetonka', u'zip': u'55305', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:05.708Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 1...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.412" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.412" starttime="20190221 23:59:21.411"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.413" starttime="20190221 23:59:21.411"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Inver Grove Heights', u'name': u'Inver Grove Heights', u'zip': u'55077', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:05.831Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.415" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.415" starttime="20190221 23:59:21.413"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.415" starttime="20190221 23:59:21.413"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Roseville', u'name': u'Roseville', u'zip': u'55113', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:05.853Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: ...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.417" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.418" starttime="20190221 23:59:21.416"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.418" starttime="20190221 23:59:21.415"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Burnsville', u'name': u'Burnsville', u'zip': u'55337', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:06.108Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.419" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.419" starttime="20190221 23:59:21.418"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.419" starttime="20190221 23:59:21.418"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Maplewood', u'name': u'Maplewood', u'zip': u'55109', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:04.414Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: ...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.421" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.421" starttime="20190221 23:59:21.420"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.421" starttime="20190221 23:59:21.420"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Blaine', u'name': u'Northtown', u'zip': u'55434', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:04.542Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.423" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.423" starttime="20190221 23:59:21.421"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.423" starttime="20190221 23:59:21.421"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Saint Cloud', u'name': u'St Cloud', u'zip': u'56301', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:04.575Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 9-9; Sat: ...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.425" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.425" starttime="20190221 23:59:21.423"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.425" starttime="20190221 23:59:21.423"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Fargo', u'name': u'Fargo', u'zip': u'58103', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:04.603Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 9-9; Sat: 9-9; Sun:...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.426" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.426" starttime="20190221 23:59:21.425"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.426" starttime="20190221 23:59:21.425"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Rochester', u'name': u'Rochester', u'zip': u'55901', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:04.756Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: ...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.428" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.428" starttime="20190221 23:59:21.427"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.428" starttime="20190221 23:59:21.427"></status>
</kw>
<kw type="foritem" name="${item} = {u'city': u'Oakdale', u'name': u'Oakdale', u'zip': u'55128', u'address2': u'', u'updatedAt': u'2016-11-17T17:57:04.813Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9...">
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.429" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.430" starttime="20190221 23:59:21.428"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.430" starttime="20190221 23:59:21.428"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.430" starttime="20190221 23:59:21.411"></status>
</kw>
<doc>*Validate - Stores endpoint for method - GET*</doc>
<tags>
<tag>rest_api_tests</tag>
<tag>stores</tag>
</tags>
<status status="PASS" endtime="20190221 23:59:21.430" critical="yes" starttime="20190221 23:59:21.386"></status>
</test>
<test id="s1-s5-t2" name="Create , Fetch, Update and Delete New record - POST, GET, PATCH, DELETE | Validate JSON Schema of each of the Responses">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${store}</arg>
<arg>{"name": "Test Create New Store","type": "BigBox","address": "123 Fake St","address2": "","city": "Springfield","state": "MN","zip": "55123","lat": 44.969658,"lng": -93.449539,"hours": "Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8"}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.431" level="INFO">${store} = {"name": "Test Create New Store","type": "BigBox","address": "123 Fake St","address2": "","city": "Springfield","state": "MN","zip": "55123","lat": 44.969658,"lng": -93.449539,"hours": "Mon: 10-9; Tue...</msg>
<status status="PASS" endtime="20190221 23:59:21.432" starttime="20190221 23:59:21.431"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores</arg>
<arg>POST</arg>
<arg>{}</arg>
<arg>${store}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${created_store_response}</var>
</assign>
<msg timestamp="20190221 23:59:21.441" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.441" level="INFO">${created_store_response} = {u'city': u'Springfield', u'name': u'Test Create New Store', u'zip': u'55123', u'address2': u'', u'updatedAt': u'2019-02-21T18:29:21.437Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fr...</msg>
<status status="PASS" endtime="20190221 23:59:21.441" starttime="20190221 23:59:21.432"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${id}</arg>
<arg>${created_store_response["id"]}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.443" level="INFO">${id} = 8977</msg>
<status status="PASS" endtime="20190221 23:59:21.443" starttime="20190221 23:59:21.442"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.443" starttime="20190221 23:59:21.443"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.443" starttime="20190221 23:59:21.443"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${created_store_response}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.445" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.445" starttime="20190221 23:59:21.444"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores/${id}</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.449" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.449" level="INFO">${response} = {u'city': u'Springfield', u'name': u'Test Create New Store', u'zip': u'55123', u'address2': u'', u'updatedAt': u'2019-02-21T18:29:21.437Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fr...</msg>
<status status="PASS" endtime="20190221 23:59:21.449" starttime="20190221 23:59:21.445"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.450" starttime="20190221 23:59:21.450"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.450" starttime="20190221 23:59:21.450"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.452" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.452" starttime="20190221 23:59:21.451"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${updated_store}</arg>
<arg>{"name": "Test Update Created Store","type": "BigBox_updated","address": "123 Fake St","address2_updated": "updated","city": "Springfield_updated","state": "MN","zip": "55123","lat": 44.969658,"lng": -93.449539,"hours": "Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8"}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.453" level="INFO">${updated_store} = {"name": "Test Update Created Store","type": "BigBox_updated","address": "123 Fake St","address2_updated": "updated","city": "Springfield_updated","state": "MN","zip": "55123","lat": 44.969658,"lng": ...</msg>
<status status="PASS" endtime="20190221 23:59:21.453" starttime="20190221 23:59:21.452"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores/${id}</arg>
<arg>PATCH</arg>
<arg>{}</arg>
<arg>${updated_store}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.461" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.461" level="INFO">${response} = {u'city': u'Springfield_updated', u'name': u'Test Update Created Store', u'zip': u'55123', u'address2': u'', u'updatedAt': u'2019-02-21T18:29:21.455Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thu...</msg>
<status status="PASS" endtime="20190221 23:59:21.461" starttime="20190221 23:59:21.453"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.462" starttime="20190221 23:59:21.462"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.462" starttime="20190221 23:59:21.461"></status>
</kw>
<kw name="Validate Response With Schema" library="RestApiTest">
<doc>Validates the json response(input) against the schema available for each endpoint
:param resource:
:param response:
:return: None</doc>
<arguments>
<arg>stores</arg>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190221 23:59:21.464" level="INFO">{u'title': u'The Root Schema', u'$id': u'http://example.com/root.json', u'required': [u'name', u'address', u'address2', u'city', u'state', u'zip', u'lat', u'lng', u'hours'], u'definitions': {}, u'$schema': u'http://json-schema.org/draft-06/schema#', u'type': u'object', u'properties': {u'city': {u'title': u'The City Schema', u'$id': u'#/properties/city', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'name': {u'title': u'The Name Schema', u'$id': u'#/properties/name', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'zip': {u'title': u'The Zip Schema', u'$id': u'#/properties/zip', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address2': {u'title': u'The Address2 Schema', u'$id': u'#/properties/address2', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'hours': {u'title': u'The Hours Schema', u'$id': u'#/properties/hours', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'state': {u'title': u'The State Schema', u'$id': u'#/properties/state', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'address': {u'title': u'The Address Schema', u'$id': u'#/properties/address', u'pattern': u'^(.*)$', u'default': u'', u'examples': [u'string'], u'type': u'string'}, u'lat': {u'$id': u'#/properties/lat', u'default': 0.0, u'type': u'number', u'examples': [28.365], u'title': u'The Lat Schema'}, u'lng': {u'$id': u'#/properties/lng', u'default': 0.0, u'type': u'number', u'examples': [-96.4567], u'title': u'The Lng Schema'}}}</msg>
<status status="PASS" endtime="20190221 23:59:21.464" starttime="20190221 23:59:21.462"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores/${id}</arg>
<arg>DELETE</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.471" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.471" level="INFO">${response} = {u'city': u'Springfield_updated', u'name': u'Test Update Created Store', u'zip': u'55123', u'address2': u'', u'updatedAt': u'2019-02-21T18:29:21.455Z', u'hours': u'Mon: 10-9; Tue: 10-9; Wed: 10-9; Thu...</msg>
<status status="PASS" endtime="20190221 23:59:21.471" starttime="20190221 23:59:21.464"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.472" starttime="20190221 23:59:21.471"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.472" starttime="20190221 23:59:21.471"></status>
</kw>
<kw name="Test Api Endpoint" library="RestApiTest">
<doc>:param resource: endpoint
:param method: GET, POST, PUT, DELETE, PATCH
:param querystring: params to fetch desired response
:param payload: Payload data for API request
:return: True or False based on the status code and response</doc>
<arguments>
<arg>stores/${id}</arg>
<arg>GET</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${response}</var>
</assign>
<msg timestamp="20190221 23:59:21.475" level="INFO">${result} = True</msg>
<msg timestamp="20190221 23:59:21.475" level="INFO">${response} = {u'className': u'not-found', u'errors': {}, u'message': u"No record found for id '8977'", u'code': 404, u'name': u'NotFound'}</msg>
<status status="PASS" endtime="20190221 23:59:21.476" starttime="20190221 23:59:21.472"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should be True</arg>
<arg>${result}</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20190221 23:59:21.476" starttime="20190221 23:59:21.476"></status>
</kw>
<status status="PASS" endtime="20190221 23:59:21.476" starttime="20190221 23:59:21.476"></status>
</kw>
<doc>*Validate - Stores endpoint for methods - POST, GET, PATCH and DELETE*</doc>
<tags>
<tag>rest_api_tests</tag>
<tag>stores</tag>
</tags>
<status status="PASS" endtime="20190221 23:59:21.477" critical="yes" starttime="20190221 23:59:21.430"></status>
</test>
<doc>Best Buy API Playground Test Suite</doc>
<status status="PASS" endtime="20190221 23:59:21.477" starttime="20190221 23:59:21.381"></status>
</suite>
<status status="PASS" endtime="20190221 23:59:21.478" starttime="20190221 23:59:20.348"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="17">Critical Tests</stat>
<stat fail="0" pass="17">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="3">categories</stat>
<stat fail="0" pass="1">healthcheck</stat>
<stat fail="0" pass="5">products</stat>
<stat fail="0" pass="17">rest_api_tests</stat>
<stat fail="0" pass="2">services</stat>
<stat fail="0" pass="5">stores</stat>
<stat fail="0" pass="1">version</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="Categories Endpoint TestSuite &amp; Functional Tests &amp; Products Endpoint TestSuite &amp; Services Endpoint TestSuite &amp; Stores Endpoint TestSuite" pass="17">Categories Endpoint TestSuite &amp; Functional Tests &amp; Products Endpoint TestSuite &amp; Services Endpoint TestSuite &amp; Stores Endpoint TestSuite</stat>
<stat fail="0" id="s1-s1" name="Categories Endpoint TestSuite" pass="2">Categories Endpoint TestSuite &amp; Functional Tests &amp; Products Endpoint TestSuite &amp; Services Endpoint TestSuite &amp; Stores Endpoint TestSuite.Categories Endpoint TestSuite</stat>
<stat fail="0" id="s1-s2" name="Functional Tests" pass="9">Categories Endpoint TestSuite &amp; Functional Tests &amp; Products Endpoint TestSuite &amp; Services Endpoint TestSuite &amp; Stores Endpoint TestSuite.Functional Tests</stat>
<stat fail="0" id="s1-s3" name="Products Endpoint TestSuite" pass="2">Categories Endpoint TestSuite &amp; Functional Tests &amp; Products Endpoint TestSuite &amp; Services Endpoint TestSuite &amp; Stores Endpoint TestSuite.Products Endpoint TestSuite</stat>
<stat fail="0" id="s1-s4" name="Services Endpoint TestSuite" pass="2">Categories Endpoint TestSuite &amp; Functional Tests &amp; Products Endpoint TestSuite &amp; Services Endpoint TestSuite &amp; Stores Endpoint TestSuite.Services Endpoint TestSuite</stat>
<stat fail="0" id="s1-s5" name="Stores Endpoint TestSuite" pass="2">Categories Endpoint TestSuite &amp; Functional Tests &amp; Products Endpoint TestSuite &amp; Services Endpoint TestSuite &amp; Stores Endpoint TestSuite.Stores Endpoint TestSuite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
